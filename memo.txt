ドメインモデル   ：名詞一覧、常に更新する必要がある。プロジェクト内で
                名詞ズレを無くすことが目的（すべての設計に影響がある）
ユースケースモデル：作成するシステムでできること（機能）を図示する
ユースケース記述　：機能をユーザー目線で分かりやすく記述する
ロバストネス分析　：機能の裏側のシステム処理を考える（分析する）
                ※機能に関わるエンティティを明確にする
シーケンスモデル　：システムの処理の流れを明確にする
                　大まかなアルゴリズムの明確化（プログラマがよく見る）
クラスモデル　　　：

論理名称：プログラムを作る前に日本語で意味を書いた設計図
物理名称：プログラムを書く際にプログラム言語でそのまま書けるように
        変数名、関数名を意識した名称で書かれている設計図

ロバストネスからシーケンスモデルに落とし込んでいく手順
1.登場モノの内 actor, boundary, control を用意する
2.各モノの繋がりをロバストネスから順番に書き起こす
3.controllerの存在を明らかにする(controller = プログラムファイル)
※.MVC、MVTの観点からcontrollerとしてシーケンスに登場する
        モノがプログラムファイルになる
4.entityにアクセスする際の戻り値を考える
5.boundaryからcontrollerに矢印を伸ばす際に
        「POST()」or「GET()」を考える(プログラム目線)
6.最終的な体裁を整える（矢印のメッセージについて）
※矢印メッセージはメソッドの実行

MVT（DjangoはMVTモデルを採用したFWです）
M:model => テーブル,DB => entity
V:view => python => controller
T:template => HTML,画面 => boundary